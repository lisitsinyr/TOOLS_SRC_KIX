;--------------------------------------------------------------------
; LURegistry.kxl
;--------------------------------------------------------------------
; RegWriteString($Key, $Name, $Value)
; RegReadString ($Key, $Name)
; RegWriteDWORD($Key, $Name, $Value)
;--------------------------------------------------------------------

;==========================================================================================
; function  CreateKey(const Key: string): Boolean;
; function  DeleteKey(const Key: string): Boolean;
; function  DeleteValue(const Name: string): Boolean;
; function  GetDataInfo(const ValueName: string; var Value: TRegDataInfo): Boolean;
; function  GetDataSize(const ValueName: string): Integer;
; function  GetDataType(const ValueName: string): TRegDataType;
; function  GetKeyInfo(var Value: TRegKeyInfo): Boolean;
; procedure GetKeyNames(Strings: TStrings);
; procedure GetValueNames(Strings: TStrings);
; function  HasSubKeys: Boolean;
; function  KeyExists(const Key: string): Boolean;
; function  LoadKey(const Key, FileName: string): Boolean;
; procedure MoveKey(const OldName, NewName: string; Delete: Boolean);
; function  OpenKey(const Key: string; CanCreate: Boolean): Boolean;
; function  OpenKeyReadOnly(const Key: String): Boolean;
; function  ReadCurrency(const Name: string): Currency;
; function  ReadBinaryData(const Name: string; var Buffer; BufSize: Integer): Integer;
; function  ReadBool(const Name: string): Boolean;
; function  ReadDate(const Name: string): TDateTime;
; function  ReadDateTime(const Name: string): TDateTime;
; function  ReadFloat(const Name: string): Double;
; function  ReadInteger(const Name: string): Integer;
; function  ReadString(const Name: string): string;
; function  ReadTime(const Name: string): TDateTime;
; function  RegistryConnect(const UNCName: string): Boolean;
; procedure RenameValue(const OldName, NewName: string);
; function  ReplaceKey(const Key, FileName, BackUpFileName: string): Boolean;
; function  RestoreKey(const Key, FileName: string): Boolean;
; function  SaveKey(const Key, FileName: string): Boolean;
; function  UnLoadKey(const Key: string): Boolean;
; function  ValueExists(const Name: string): Boolean;
; procedure WriteCurrency(const Name: string; Value: Currency);
; procedure WriteBinaryData(const Name: string; var Buffer; BufSize: Integer);
; procedure WriteBool(const Name: string; Value: Boolean);
; procedure WriteDate(const Name: string; Value: TDateTime);
; procedure WriteDateTime(const Name: string; Value: TDateTime);
; procedure WriteFloat(const Name: string; Value: Double);
; procedure WriteInteger(const Name: string; Value: Integer);
;+procedure WriteString(const Name, Value: string);
; procedure WriteExpandString(const Name, Value: string);
; procedure WriteTime(const Name: string; Value: TDateTime);
; property  CurrentKey: HKEY read FCurrentKey;
; property  CurrentPath: string read FCurrentPath;
; property  LazyWrite: Boolean read FLazyWrite write FLazyWrite;
; property  RootKey: HKEY read FRootKey write SetRootKey;
; property  Access: LongWord read FAccess write FAccess;
;==========================================================================================

;--------------------------------------------------------------
; RegWriteString($Key, $Name, $Value)
;--------------------------------------------------------------
function RegWriteString($Key, $Name, $Value)
;begin
    $Result = WriteValue ($Key, $Name, $Value, "REG_SZ")
endfunction

;--------------------------------------------------------------
; RegWriteStringExpand($Key, $Name, $Value)
;--------------------------------------------------------------
function RegWriteStringExpand($Key, $Name, $Value)
;begin
    $Result = WriteValue ($Key, $Name, $Value, "REG_EXPAND_SZ")
endfunction

;--------------------------------------------------------------
; RegDeleteKey ($Key)
;--------------------------------------------------------------
function RegDeleteKey ($Key)
;begin
   $RegDeleteKey = DelKey($Key)
   $RegDeleteKey = DelTree($Key)
endfunction

;--------------------------------------------------------------
; RegReadString ($Key, $Name)
;--------------------------------------------------------------
function RegReadString ($Key, $Name)
;begin
   $RegReadString = ReadValue ($Key, $Name)
endfunction

;--------------------------------------------------------------
; RegWriteDWORD($Key, $Name, $Value)
;--------------------------------------------------------------
function RegWriteDWORD($Key, $Name, $Value)
    $Result = WriteValue ($Key, $Name, $Value, "REG_DWORD")
endfunction

;--------------------------------------------------------------
; RegWriteBinaryData($Key, $Name, $Value)
;--------------------------------------------------------------
function RegWriteBinaryData($Key, $Name, $Value)
    $Result = WriteValue ($Key, $Name, $Value, "REG_BINARY")
endfunction
